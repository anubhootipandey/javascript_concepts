1.What is http?
My answer:- HTTP stands for Hyper Text Transfer Protocol. It is the foundation of data comminication on the web.
When you type a web address (like www.google.com) into your browser, HTTP is the protocol used to transfer the web page
from the server to your browser.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.Difference between http and https?
My answer:- 
HTTP- data sent using http is not encrypted that means anyone on the network can potentially see what you are doing.
    -It typically uses port 80.
HTTPs-Data sent using https is encrypted using SSL/TLS that means making it much harder for anyone to see or tamper 
    with the data. 
    -Typically uses port 443.
    -Websites using https are generally trusted more beacuse they ensure secure connections.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    

3.Whenever some websites load let's say if we go to google.com in which all these things load HTML and CSS and JavaScript do they load immediately or one by one how do they load?
My answer:-
Step 1. DNS Lookup- Your browser translates the website URL into an IP address to locate the server hosting the site.
Step 2. HTTP/HTTPs Request- The browser sends a request to the server to fetch the web page.
Step 3. Server Response-The server responds by sending the HTML file, which is the main structure of the webpage.
Step 4. HTML Loading- The browser starts reading the html from top to bottom. As it reads, it builds the structure of the page(called the DOM).
        If the HTML includes links to CSS or JS files, the browser makes separate HTTP requests to fetch these files.
Step 5. CSS Loading- The browser downloads these CSS files and applies the styles to the HTML, determing how everything looks.
        This process is crucial because the browser often won't render the page until the CSS is loaded and applied.
Step 6. Javscript Loading- JS files can be linked in the <head>, at the end of the <body>, or inline within the HTML.
        If the browser encounters a <script> tag without attributes, it will stop rendering, fetch the script, and execute it immediately. 
        This can block the page rendering process.
        To avoid blocking, you can use the 'async' and 'defer' attribhutes:
           'async'- The script is fetched and executed asynchronously as soon as its available, without blocking HTML parsing.
           'defer'- The script is fetched in parallel but executed only after the HTML parsing is complete.
Step &. Rendering-Once the HTML is parsed, CSS is loaded and applied, and JavaScript is executed (if not deferred), the browser can render the content on the screen.
        Images and other media resources may continue to load in the background. 
The goal is to make the critical content load as fast as possible, which is why CSS is prioritized over JavaScript for initial rendering, and JavaScript is often loaded in ways that minimize blocking the rendering process.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.Difference between element and tag in html?
My answer:-
Tag- Tags are the building blocks of HTML. They are used to mark the beginning and end of an HTML element.
Element-An element consists of an opening tag, content, and a closing tag. It's the complete structure used to define content and attributes in HTML.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.What are the semantic tag in html?
My answer:- Semantic tags in HTML are tags that provide meaning about the content they enclose, both to the browser and to developers. These tags make the structure of the HTML document more readable and meaningful. 
            They help improve accessibility, SEO, and maintainability of web pages by clearly defining the different parts of a web page.
            Common semantic tags:- <header>, <footer>, <nav>, <main>, <article>, <section>, <aside>, <figure>, <figcaption> and <mark>.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6.Benefits of using sematic tags?
My answer-
a.It is more readable and maintainable for the developers.
b.It provides SEO, means search engines can more accurately index the content of the webpage.
c.It improves accessibility means readers and assitive technologies can better understand and navigate the structure of a webpage.
d. It helps apply consistent styling across different sections of a webpage.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.Difference between div and span tag?
My answer- div and span are non-sematic elements in HTML.
div-  is a block-level element used to group larger chunks of content. It often acts as a container for other HTML elements to apply styles or scripts to multiple elements at once.
      Block-level, meaning it starts on a new line and takes up the full width available.
      Commonly used for layout purposes, such as creating sections, columns, and overall structure of a webpage.
span-  is an inline element used to group small portions of text or other inline elements. It is often used to apply styles or scripts to a specific part of the text within a larger block of content.
       Inline, meaning it does not start on a new line and only takes up as much width as necessary.
       Commonly used for styling a part of a text within a paragraph or other inline elements, such as changing the color of a word or adding a tooltip to a specific piece of text.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8.When to use div and span?
My answer:-
div- When you need to create a container for other elements and want to apply styles, scripts, or layout properties to a group of elements. 
     Ideal for sections, headers, footers, articles, and other structural divisions.
span- When you need to apply styles or scripts to a small part of the content, such as highlighting a word, adding a tooltip, or styling a specific piece of text within a larger block element.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9.What is specificity in CSS?
My answer:-Specificity in CSS is a set of rules that determines which styles are applied to an element when there are multiple conflicting styles. 
           It helps the browser decide which CSS rules take precedence and should be applied.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10.Which has highest or lowest specificity in CSS?
My answer:- Styles written directly in the HTML element (e.g., <div style="color: red;">) have the highest specificity.
Element selectors (e.g., p, div) have the lowest specificity.
Class selectors (e.g., .class-name) have higher specificity than element selectors.
ID selectors (e.g., #id-name) have higher specificity than class selectors.

******NOTE******-----> Using !important overrides any other specificity rules, but it's generally best to avoid using it as it can make your CSS harder to manage.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

11.How to calculate specificity?
My answer:- Specificity is calculated based on the types of selectors used:
a-Inline styles: 1000 points
b-ID selectors: 100 points each
c-Class selectors, attribute selectors, and pseudo-classes: 10 points each
d-Element selectors and pseudo-elements: 1 point each

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12.What is box model?
My answer:- The box model is a fundamental concept that describes how elements on a web page are structured and how their dimensions are calculated. It essentially defines the space that an element occupies on the page, including its content, padding, border, and margin.
+----------------------------+
|         Margin             |
|  +----------------------+  |
|  |       Border         |  |
|  |  +----------------+  |  |
|  |  |    Padding     |  |  |
|  |  |  +----------+  |  |  |
|  |  |  |  Content |  |  |  |
|  |  |  +----------+  |  |  |
|  |  +----------------+  |  |
|  +----------------------+  |
+----------------------------+

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13.Default value of box-sizing?
My answer:-By default, browsers use the content-box value for the box-sizing property. 
           This means that the width and height you set for an element only apply to the content area. 
           Padding and border are added outside of this width and height.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

14.Difference between position: absolute | relative?
My answer:-
Relative: Element remains in normal flow but can be moved using top, right, bottom, left.
Absolute: It takes an element out of the normal flow and positions it based on its nearest positioned ancestor or the whole page if none exist.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

15.Default value of position property?
My answer:-The default value of the position property in CSS is static.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

16.Is JavaScript single threaded or multithreaded?
My answer:-JavaScript is single-threaded. This means it has one call stack and one memory heap. 
           As a result, it can only do one thing at a time, even though it can handle asynchronous operations using events and callbacks.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

17.How may datatypes are there in JavaScript?
My answer:- Two type of data types:
a-Primitive datatype:- Number, string, boolean, undefined, symbol, null.
b-Non-primitive datatype:- Objects

****Note***----JavaScript is a dynamically typed language, meaning variables can hold values of any data type.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

18. What are variables in JavaScript and its types? 
My answer:- Variables in JavaScript allow you to store and manipulate different types of data, making them essential for programming tasks.
a.let- Block-scoped (scoped to the nearest curly braces {}). Cannot be re-declared in the same scope. Can be updated.
b.var- Function-scoped, not block-scoped. Can be re-declared and updated.Not recommended for modern JavaScript due to its scoping quirks.
c.const- Block-scoped.Cannot be re-declared or updated once initialized (except for objects and arrays, where their properties can be updated).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

19.What are functions in Javascript?
My answer:- They are blocks of code that can be named and reused to perform a task or calculate a value.
            Functions allow you to write reusable code and are a fundamental building block of JavaScript programs.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

20.Difference between parameters and arguments?
My answer:-
Parameters: Think of parameters as variables in a function definition. They are placeholders for the values that the function will receive when it's called.
Arguments: Arguments are the actual values that are passed to a function when it's called. They match up with the parameters defined in the function declaration.

In simpler terms, parameters are like empty boxes waiting to be filled, 
while arguments are the actual things you put inside those boxes when you call the function.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

21.What is DOM?
My answer:-
DOM stands for Document Object Model. In simpler terms, the DOM is a programming interface for web documents. 
It represents the page so that programs can change the document structure, style, and content.
or
DOM, or Document Object Model, is like a map of a webpage that a web browser creates when it loads a webpage. 
It represents all the elements on the page, like headings, paragraphs, images, and buttons. This map lets programs like JavaScript change the page's content, structure, and style.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

22.Why do we need DOM?
My answer:-
We need the DOM (Document Object Model) because it allows JavaScript to interact with and change the content, structure, and style of a webpage. 
It acts like a bridge between web pages and scripts, enabling dynamic and interactive web experiences. 
Without the DOM, JavaScript wouldn't be able to update what you see on a webpage based on user actions, like clicking a button or submitting a form.

or

the DOM (Document Object Model) is crucial because it provides a structured representation of a web page's content, 
allowing programming languages like JavaScript to interact with and manipulate the content dynamically. 

Here's why we need the DOM in simpler terms:

a-Interactive Web Pages: The DOM allows us to make web pages interactive. 
                        With JavaScript and the DOM, we can change the content, style, and structure of a web page based on user actions or other events.
b-Dynamic Updates: We can update parts of a web page without reloading the entire page. 
                   For example, you can change text, add new elements, or move things around without needing to refresh.
c-Event Handling: We can listen for events such as clicks, key presses, or mouse movements, and respond to them accordingly. 
                  This makes web pages responsive to user input.
d-Cross-Browser Compatibility: The DOM provides a standardized way to access and manipulate HTML and XML documents across different web browsers.
e-Integration with APIs: Many web APIs use the DOM to interact with web pages, enabling functionalities like data fetching, form submissions, and more.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

23.Why do we need React?
My answer:-React provides a way to make building user interfaces in JavaScript easier and more organized. 

Here's why we use React:

a-Component-Based: React breaks down your user interface into smaller, reusable pieces called components. 
                   This makes it easier to manage and update different parts of your application.
b-Declarative: React uses a declarative programming style, where you describe how your UI should look based on its current state. 
             This makes your code more predictable and easier to debug.
c-Efficient Updates: React uses a virtual DOM to keep track of changes in your UI. 
                   It only updates the necessary parts of the actual DOM, which makes your application faster and more efficient.
d-Ecosystem and Community: React has a large and active community with many libraries and tools that make building complex applications easier. 
                        It's supported by Facebook and a wide range of developers.
e-JSX: React uses JSX, a syntax extension to JavaScript that allows you to write HTML-like code directly in your JavaScript files. 
    This makes your components more readable and easier to understand.
State Management: React provides a simple way to manage the state of your application, making it easier to keep track of changes and update your UI accordingly.

In summary, React simplifies the process of building complex user interfaces by breaking them into smaller, reusable components, managing state efficiently, 
and providing a declarative way to describe how your UI should behave. It's not necessary for all projects, but it can significantly improve productivity and 
maintainability in larger, more complex applications.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

24.What is state in React?
My answer:-In simpler words, state in React is like a memory for a component. It's a place where you can store data that changes over time. This data can influence what the component renders and how it behaves. When the state updates, React automatically re-renders the component to reflect those changes.
For example, if you have a counter component, the count value is stored in its state. When you click a button to increase the count, React updates the state and re-renders the component to show the new count.
State allows React components to be dynamic and responsive to user input or changes in data, making applications interactive and flexible.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

25.Why do we use state and not let var and const?
My answer:-state in React is used instead of let, var, or const because:

a-Automatic Updates: When state changes, React automatically re-renders the component. This means you don't have to manually update the DOM or keep track of when things change.
b-Component Scope: State is specific to each component. This keeps your data organized and prevents unintended changes from affecting other parts of your application.
c-Easier Management: State allows you to manage and update data that changes over time, such as user input, fetching data from a server, or keeping track of UI state like open/closed modals.
d-Predictable Rendering: React optimizes rendering based on changes in state, ensuring that only the necessary parts of your UI are updated. This makes your application faster and more efficient.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




































