1. Difference between pseudo elemnt and pseudo class?
My answer-
a--Pseudo-class: A pseudo-class is like a "state" of an element. It's used to style an element when it's in a certain state or condition, like :hover, :active, or :focus.
b--Pseudo-element: A pseudo-element, on the other hand,allows you to style specific parts of an element. It creates virtual elements that don't exist in the HTML, like ::before or ::after, which can be used to add content or style a specific part of an element.

--------------------------------------------------------------

2.Difference between margin and padding?
My answer:-
a--Margin: Margin is the space outside the border of an element. It creates space between the element and other elements around it.
b--Padding: Padding is the space inside the border of an element. It creates space between the element's content and its border.

--------------------------------------------------------------

3.Difference between box-sizing: border-box | content-box ?
My answer:-
a--content-box: This is the default box-sizing behavior. When you set an element to box-sizing: content-box;, the width and height you assign to the element only apply to the content of the element. Padding and border are added to the width and height.
b--border-box: When you set an element to box-sizing: border-box;, the width and height you assign to the element include the padding and border of the element. This means that the padding and border are included inside the element's specified width and height, so the overall size of the box is the width and height you set.

--------------------------------------------------------------

4.What is inheritance in CSS?
My answer:- Inheritance in CSS refers to the mechanism by which certain properties of an HTML element are passed down to its children. Here's a simplified explanation:

When you apply a style to an element, such as a color or font size, that style can be inherited by its child elements unless explicitly overridden. This allows you to set styles at a higher level in the HTML hierarchy and have them apply to all nested elements unless a child element has its own style for that property.

Not all properties are inherited by default. Properties like color, font-family, font-size, line-height, text-align, etc., are inherited, while properties like margin, padding, border, etc., are not.

To control inheritance, you can use the inherit value explicitly or initial to revert to the default value for that property.

--------------------------------------------------------------
-------------------------JAVASCRIPT---------------------------
--------------------------------------------------------------

1.Difference between == and ===?
My answer:-
==:-checks for the value not the datatype.
===:-checks for both the value and datatype.

--------------------------------------------------------------

2.Difference between if-else and ternary operator?
My answer:-
if-else: A conditional statement that executes one block of code if a condition is true and another block if it is false. It is more verbose and can handle multiple statements.
It is a statement.

Ternary operator: A compact conditional expression that evaluates a condition and returns one value if true and another if false. It is written in a single line: condition ? valueIfTrue : valueIfFalse.
It is an expression.

--------------------------------------------------------------

3.Difference between function declaration and function expression?
My answer:-Function declarations are hoisted and can be called before they appear in the code, while function expressions are not hoisted and must be defined before they are called.

--------------------------------------------------------------

4.How do we handle errors in javascript?
My answer:-
a--try block: Wraps the code that may throw an error.
b--catch block: Executes if an error occurs in the try block. It captures the error and allows you to handle it.
c--finally block (optional): Executes after the try and catch blocks, regardless of whether an error occurred.

--------------------------------------------------------------

5.What is hoisting?
My answer:-Hoisting in JavaScript is a behavior where variable and function declarations are moved to the top of their containing scope during the compile phase. This means you can use variables and functions before you declare them in the code. However, only the declarations are hoisted, not the initializations.

a--Variable hoisting: Variables declared with var are hoisted to the top of their scope, but their initialization is not hoisted. This means they are undefined until the assignment occurs in the code.

b--Function hoisting: Function declarations are hoisted with both their name and body, so you can call the function before it is defined in the code.

c--Let and const: Variables declared with let and const are also hoisted but are not initialized. They remain in a "temporal dead zone" from the start of the block until the declaration is encountered, meaning you cannot use them before the declaration.

--------------------------------------------------------------















